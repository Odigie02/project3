# version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       workflow_id: 
#         type: string  
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive
#             aws cloudformation delete-stack \
#             --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
#             aws cloudformation delete-stack \
#             --stack-name "udapeople-backend-<< parameters.workflow_id >>"

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       workflow_id: 
#         type: string     
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS=$(curl --insecure  https://kvdb.io/U1N6g4AAqVAcaNKE924tee/migration_<< parameters.workflow_id >>)
#             if [[ "${SUCCESS}" == 1 ]];  
#             then
#               cd ~/project/backend
#               npm install
#               npm run migration:revert
#             fi
            
# jobs:
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Build front-end
#           command: |
#             cd frontend
#             npm install
#             npm run build
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build

#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       # - run:
#       #     name: Save environment variables
#       #     command: |
#       #       cat \<< EOF > backend/.env
#       #       ENVIRONMENT=production
#       #       TYPEORM_CONNECTION=postgres
#       #       TYPEORM_MIGRATIONS_DIR=./src/migrations
#       #       TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
#       #       TYPEORM_MIGRATIONS=./src/migrations/*.ts
#       #       TYPEORM_HOST=${TYPEORM_HOST}
#       #       TYPEORM_PORT=${TYPEORM_PORT}
#       #       TYPEORM_USERNAME=${TYPEORM_USERNAME}
#       #       TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
#       #       TYPEORM_DATABASE=${TYPEORM_DATABASE}
#       #       EOF
#       - run:
#           name: Back-end build
#           command: |
#              cd backend
#              npm install 
#              npm run build

#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build

#   test-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Test front-end
#           command: |
#             cd frontend
#             npm install
#             npm run test
                
#   test-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Test back-end
#           command: |
#             cd backend
#             npm install
#             npm run test
            
#   scan-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run: 
#           name: Scan for vulnerabilities
#           command: |
#             cd frontend
#             npm install
#             # npm install oauth-sign@^0.9.0
#             npm audit fix --audit-level=critical --force
#             npm audit --audit-level=critical

#   scan-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run: 
#           name: Scan for vulnerabilities
#           command: |
#             cd backend
#             npm install
#             # npm install oauth-sign@^0.9.0
#             npm audit fix
#             npm audit fix --audit-level=critical --force
#             npm audit --audit-level=critical

#   deploy-infrastructure:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run: yum install -y tar gzip
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/backend.yml \
#             --tags project=udapeople \
#             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --tags project=udapeople \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text >> ~/project/.circleci/ansible/inventory.txt
#             cat ~/project/.circleci/ansible/inventory.txt             
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt   
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   

#   configure-infrastructure:
#     docker:
#       - image: python:3.7-alpine3.16
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - add_ssh_keys:
#             # fingerprints: ["2b:08:8f:fe:d1:70:b5:91:1d:e7:f7:5c:06:f7:3a:bd"] # for personal acc
#             fingerprints: ["	1f:a9:1e:34:55:23:f5:ff:a6:73:de:50:8c:59:05:cc"] # for project3 acc
#       - run:
#           name: Install Ansible and aws-cli
#           command: |
#             apk add --no-cache aws-cli 
#             apk add --update ansible
#       - run:
#           name: Configure server
#           command: |
#             cd .circleci/ansible
#             ansible-playbook -i inventory.txt configure-server.yml -vvv   
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   run-migrations:
#     docker:
#       - image: circleci/node:13.8.0   
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       # - run:
#           # name: prepare environment for backend build
#           # command: |
#           #   cat \<< EOF > backend/.env
#           #   ENVIRONMENT=production
#           #   TYPEORM_CONNECTION=postgres
#           #   TYPEORM_MIGRATIONS_DIR=./src/migrations
#           #   TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
#           #   TYPEORM_MIGRATIONS=./src/migrations/*.ts
#           #   TYPEORM_HOST=${TYPEORM_HOST}
#           #   TYPEORM_PORT=${TYPEORM_PORT}
#           #   TYPEORM_USERNAME=${TYPEORM_USERNAME}
#           #   TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
#           #   TYPEORM_DATABASE=${TYPEORM_DATABASE}
#           #   EOF
#       - run: 
#           name: Install aws cli
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#             aws --version
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             npm i
#             npm run build
#             npm run migrations > ~/project/backend/migrations_dump.txt
#             cat ~/project/backend/migrations_dump.txt
#       - run:
#           name: Send migration results to memstash
#           command: |
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#             then
#             curl -k https://kvdb.io/U1N6g4AAqVAcaNKE924tee/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
#             else
#             echo "Migration may have failed"
#             fi
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   

#   deploy-frontend:
#     docker:
#       - image: circleci/node:16.13.1-bullseye 
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - run: 
#           name: Install aws cli
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#             aws --version
#       - run:
#           name: Get backend url
#           command: |
#             # tail -n 1 ~/project/.circleci/ansible/inventory.txt > backendIP.txt
#             # BACKEND_IP=$(<backendIP.txt)
#             BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
#             cat frontend/.env
#       - run:
#           name: Deploy frontend objects
#           command: |
#             cd frontend
#             npm install
#             npm run build
#             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
#             tar tf artifact-"${CIRCLE_WORKFLOW_ID:0:7}.tar.gz"
#             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive   
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
                    
#   deploy-backend:
#     docker:
#       - image: circleci/node:16.13.1-bullseye         
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - add_ssh_keys:
#             # fingerprints: ["2b:08:8f:fe:d1:70:b5:91:1d:e7:f7:5c:06:f7:3a:bd"] # for personal acc
#             fingerprints: ["	1f:a9:1e:34:55:23:f5:ff:a6:73:de:50:8c:59:05:cc"] # for project3 acc
#       - run:
#           name: Install aws cli
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#             aws --version
#       - run:
#           name: Install Ansible
#           command: |
#             sudo apt-get update
#             sudo apt-get install python3-pip git libffi-dev libssl-dev -y
#             pip3 install ansible==2.9.27
#       - run:
#           name: Run build and archive backend
#           command: |
#             cd backend
#             npm i
#             npm run build
#             cd ..
#             # Zip the directory
#             tar -C backend -czvf artifact.tar.gz .
#       - run:
#           name: Deploy backend
#           command: |
#             cd .circleci/ansible
#             echo "Contents  of the inventory.txt file is -------"
#             cat ~/project/.circleci/ansible/inventory.txt
#             ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml -vvv           
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          
#   smoke-test:
#     docker:
#       - image: alpine:latest
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update curl
#             apk add --no-cache aws-cli
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Backend smoke test.
#           command: |
#             BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
#             API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             sleep 150

#             if curl "${API_URL}/api/status" 
#             then
#               return 0
#             else
#               return 1
#             fi

#       - run:
#           name: Frontend smoke test.
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
#             echo ${URL}
#             if curl -s ${URL} | grep "Welcome"
#             then
#               exit 0
#             else
#               exit 1
#             fi
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             yum install tar gzip -y
#       - run:
#           name: Fetch and save the old stack workflow id
#           command: |
#             aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text > ~/OldWorkflowID.txt
#             cat ~/OldWorkflowID.txt
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/cloudfront.yml \
#             --stack-name InitialStack \
#             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#             --tags project=udapeople
#       - persist_to_workspace:
#           root: ~/
#           paths: 
#             - OldWorkflowID.txt
#       - attach_workspace:
#           at: ~/
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   cleanup:
#       docker:
#         - image: amazon/aws-cli
#       steps:
#         - checkout
#         - run: yum install -y tar gzip
#         - attach_workspace:
#             at: ~/
#         # - run:
#         #     name: Remove bucket created manually
#         #     command: |
#         #       cat ~/oldbucketid.txt
#         #       export OldBucketID=$(cat ~/oldbucketid.txt)
#         #       aws s3 rm "s3://udapeople-${OldBucketID}" --recursive
#         #       aws s3api delete-bucket --bucket udapeople-${OldBucketID}
#         - run:
#             name: Remove stacks
#             command: |
#               cat ~/OldWorkflowID.txt
#               # Fetch the Old workflow ID
#               export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
              
#               echo OldWorkflowID "${OldWorkflowID}"
#               echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

#               # Fetch the stack names          
#               export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#               --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
#               echo Stack names: "${STACKS[@]}"  

#               if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
#               then
#                 aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#                 aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#                 aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#               else
#                 echo "No old stacks to be deleted"
#               fi            
              
# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           # filters:
#           #   branches:
#           #     only: [master]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]





# Test Async
version: 2.1
# orbs:
#   slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy  Backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy Frontend environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  # notify:
  #   docker:
  #     - image: "cimg/base:stable"
  #   steps:
      # - slack/notify:
      #     event: fail
      #     mentions: "@channel"
      #     template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #     template: success_tagged_deploy_1
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend 
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      # - run:
      #     name: Save environment variables
      #     command: |
      #       cat \<< EOF > backend/.env
      #       ENVIRONMENT=production
      #       TYPEORM_CONNECTION=postgres
      #       TYPEORM_MIGRATIONS_DIR=./src/migrations
      #       TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
      #       TYPEORM_MIGRATIONS=./src/migrations/*.ts
      #       TYPEORM_HOST=${TYPEORM_HOST}
      #       TYPEORM_PORT=${TYPEORM_PORT}
      #       TYPEORM_USERNAME=${TYPEORM_USERNAME}
      #       TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
      #       TYPEORM_DATABASE=${TYPEORM_DATABASE}
      #       EOF
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend Code
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend Code
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend Code
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Backend Code
          command: |
            cd backend
            npm install
            npm audit fix  --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Create Backend Infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Ensure Frontend Infrastructure is running
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Get Public IP Address of EC2 instance
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --update openssh-client git
      - add_ssh_keys:
          fingerprints:
            - "1f:a9:1e:34:55:23:f5:ff:a6:73:de:50:8c:59:05:cc"
      - attach_workspace:
          at: ~/

      - run: apk add --update tar gzip
      - run: apk add --update ansible
      - run: pip install awscli
      - run:
          name: Configure Infrastructure
          command: |
            ansible-playbook --ssh-common-args='-o StrictHostKeyChecking=no' -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]   
      # - run:
      #     name: Save environment variables
      #     command: |
      #       cat \<< EOF > backend/.env
      #       ENVIRONMENT=production
      #       TYPEORM_CONNECTION=postgres
      #       TYPEORM_MIGRATIONS_DIR=./src/migrations
      #       TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
      #       TYPEORM_MIGRATIONS=./src/migrations/*.ts
      #       TYPEORM_HOST=${TYPEORM_HOST}
      #       TYPEORM_PORT=${TYPEORM_PORT}
      #       TYPEORM_USERNAME=${TYPEORM_USERNAME}
      #       TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
      #       TYPEORM_DATABASE=${TYPEORM_DATABASE}
      #       EOF  
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl https://kvdb.io/YRjnJbpJUHio8N1NyCs9bd/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment

  deploy-frontend:
    # docker:
    #   - image: alpine:latest
    # steps:
    #   - checkout
    #   - run: apk add --update npm
    docker:
      - image: circleci/node:16.13.1-bullseye 
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: 
          name: Install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - run:
          name: Get Backend URL
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

            # export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            # export API_URL="http://${BACKEND_IP}:3030"
            # echo "API_URL = ${API_URL}"
            # echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env        
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --update openssh-client git rsync
      - add_ssh_keys:
          fingerprints:
            - "1f:a9:1e:34:55:23:f5:ff:a6:73:de:50:8c:59:05:cc"
      - run: apk add --update  tar gzip
      - run: apk add --update  nodejs npm
      - run: pip install awscli
      - attach_workspace:
          at: ~/
      - run: apk add --update ansible

      - run:
          name: Deploy Backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            # mkdir ~/project/.circleci/ansible/roles/deploy/files
            # cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook --ssh-common-args='-o StrictHostKeyChecking=no' -i inventory.txt deploy-backend.yml
      # - destroy-environment

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run: apk add --update openssh-client git
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url and Smoke Test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[].Instances[].[PublicDnsName]' \
            --output text | xargs)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      #- destroy-environment
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      # - notify
      - deploy-infrastructure:
          requires:
            - scan-frontend
            - scan-backend
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
