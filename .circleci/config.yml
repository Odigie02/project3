# version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       workflow_id: 
#         type: string  
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive
#             aws cloudformation delete-stack \
#             --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
#             aws cloudformation delete-stack \
#             --stack-name "udapeople-backend-<< parameters.workflow_id >>"

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       workflow_id: 
#         type: string     
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS=$(curl --insecure  https://kvdb.io/U1N6g4AAqVAcaNKE924tee/migration_<< parameters.workflow_id >>)
#             if [[ "${SUCCESS}" == 1 ]];  
#             then
#               cd ~/project/backend
#               npm install
#               npm run migration:revert
#             fi
            
# jobs:
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Build front-end
#           command: |
#             cd frontend
#             npm install
#             npm run build
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build

#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Back-end build
#           command: |
#              cd backend
#              npm install 
#              npm run build

#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build

#   test-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Test front-end
#           command: |
#             cd frontend
#             npm install
#             npm run test
                
#   test-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Test back-end
#           command: |
#             cd backend
#             npm install
#             npm run test
            
#   scan-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run: 
#           name: Scan for vulnerabilities
#           command: |
#             cd frontend
#             npm install
#             # npm install oauth-sign@^0.9.0
#             npm audit fix --audit-level=critical --force
#             npm audit --audit-level=critical

#   scan-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run: 
#           name: Scan for vulnerabilities
#           command: |
#             cd backend
#             npm install
#             # npm install oauth-sign@^0.9.0
#             npm audit fix
#             npm audit fix --audit-level=critical --force
#             npm audit --audit-level=critical

#   deploy-infrastructure:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run: yum install -y tar gzip
#       - run: touch $BASH_ENV
#       - run: 
#           name: Get Old back-end server IP if it exists #This is for cleaning up previous version
#           command: |
#             echo 'export OLD_BACKEND_IP=(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)' >> BASH_ENV
#             #aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text > oldbackendIP.txt
#             #cat oldbackendIP.txt
#             #cat oldbackendIP.txt >> $BASH_ENV
#             echo $OLD_BACKEND_IP
#             # source $BASH_ENV
#             echo "************************************************************"
#             echo $BASH_ENV
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/backend.yml \
#             --tags project=udapeople \
#             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --tags project=udapeople \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text >> ~/project/.circleci/ansible/inventory.txt
#             cat ~/project/.circleci/ansible/inventory.txt 
#             sed -i "/${BASH_ENV}/d" ~/project/.circleci/ansible/inventory.txt 
#             cat ~/project/.circleci/ansible/inventory.txt             
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt   
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   

#   configure-infrastructure:
#     docker:
#       - image: python:3.7-alpine3.16
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - add_ssh_keys:
#             # fingerprints: ["2b:08:8f:fe:d1:70:b5:91:1d:e7:f7:5c:06:f7:3a:bd"] # for personal acc
#             fingerprints: ["	1f:a9:1e:34:55:23:f5:ff:a6:73:de:50:8c:59:05:cc"] # for project3 acc
#       - run:
#           name: Install Ansible and aws-cli
#           command: |
#             apk add --no-cache aws-cli 
#             apk add --update ansible
#       - run:
#           name: Configure server
#           command: |
#             cd .circleci/ansible
#             ansible-playbook -i inventory.txt configure-server.yml -vvv   
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   run-migrations:
#     docker:
#       - image: circleci/node:13.8.0   
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run: 
#           name: Install aws cli
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#             aws --version
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             npm i
#             npm run build
#             npm run migrations > ~/project/backend/migrations_dump.txt
#             cat ~/project/backend/migrations_dump.txt
#       - run:
#           name: Send migration results to memstash
#           command: |
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#             then
#             curl -k https://kvdb.io/U1N6g4AAqVAcaNKE924tee/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
#             else
#             echo "Migration may have failed"
#             fi
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   

#   deploy-frontend:
#     docker:
#       - image: circleci/node:16.13.1-bullseye 
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - run: 
#           name: Install aws cli
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#             aws --version
#       - run:
#           name: Get backend url
#           command: |
#             # tail -n 1 ~/project/.circleci/ansible/inventory.txt > backendIP.txt
#             # BACKEND_IP=$(<backendIP.txt)
#             BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
#             cat frontend/.env
#       - run:
#           name: Deploy frontend objects
#           command: |
#             cd frontend
#             npm install
#             npm run build
#             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
#             tar tf artifact-"${CIRCLE_WORKFLOW_ID:0:7}.tar.gz"
#             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive   
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
                    
#   deploy-backend:
#     docker:
#       - image: circleci/node:16.13.1-bullseye         
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - add_ssh_keys:
#             # fingerprints: ["2b:08:8f:fe:d1:70:b5:91:1d:e7:f7:5c:06:f7:3a:bd"] # for personal acc
#             fingerprints: ["	1f:a9:1e:34:55:23:f5:ff:a6:73:de:50:8c:59:05:cc"] # for project3 acc
#       - run:
#           name: Install aws cli
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#             aws --version
#       - run:
#           name: Install Ansible
#           command: |
#             sudo apt-get update
#             sudo apt-get install python3-pip git libffi-dev libssl-dev -y
#             pip3 install ansible==2.9.27
#       - run:
#           name: Run build and archive backend
#           command: |
#             cd backend
#             npm i
#             npm run build
#             cd ..
#             # Zip the directory
#             tar -C backend -czvf artifact.tar.gz .
#       - run:
#           name: Deploy backend
#           command: |
#             cd .circleci/ansible
#             echo "Contents  of the inventory.txt file is -------"
#             cat ~/project/.circleci/ansible/inventory.txt
#             ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml -vvv           
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          
#   smoke-test:
#     docker:
#       - image: alpine:latest
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update curl
#             apk add --no-cache aws-cli
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Backend smoke test.
#           command: |
#             BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
#             API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             sleep 150

#             if curl "${API_URL}/api/status" 
#             then
#               return 0
#             else
#               return 1
#             fi

#       - run:
#           name: Frontend smoke test.
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
#             echo ${URL}
#             if curl -s ${URL} | grep "Welcome"
#             then
#               exit 0
#             else
#               exit 1
#             fi
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             yum install tar gzip -y
#       - run:
#           name: Fetch and save the old stack workflow id
#           command: |
#             aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text > ~/OldWorkflowID.txt
#             cat ~/OldWorkflowID.txt
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/cloudfront.yml \
#             --stack-name InitialStack \
#             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#             --tags project=udapeople
#       - persist_to_workspace:
#           root: ~/
#           paths: 
#             - OldWorkflowID.txt
#       - attach_workspace:
#           at: ~/
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   cleanup:
#       docker:
#         - image: amazon/aws-cli
#       steps:
#         - checkout
#         - run: yum install -y tar gzip
#         - attach_workspace:
#             at: ~/
#         # - run:
#         #     name: Remove bucket created manually
#         #     command: |
#         #       cat ~/oldbucketid.txt
#         #       export OldBucketID=$(cat ~/oldbucketid.txt)
#         #       aws s3 rm "s3://udapeople-${OldBucketID}" --recursive
#         #       aws s3api delete-bucket --bucket udapeople-${OldBucketID}
#         - run:
#             name: Remove stacks
#             command: |
#               export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
#               echo OldWorkflowID is:  "${OldWorkflowID}"
#               echo CIRCLE_WORKFLOW_ID is:  "${CIRCLE_WORKFLOW_ID:0:7}"

#               # Fetch the stack names          
#               # export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#               # --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
#               # echo Stack names: "${STACKS[@]}" 
          
#               if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]] && [ -n "${OldWorkflowID}" ] # if current wfid is not the same as owfid and owfid is not an empty string then delet stack. Note -z is for empty string 
#               then
#                 echo "*******************Deleting Stacks*******************"
#                 aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#                 aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#                 aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#               else
#                 echo "********************No Old stacks present***************"
#               fi
                        
              
# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           # filters:
#           #   branches:
#           #     only: [master]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]


version: 2.1

orbs:
  slack: circleci/slack@4.3.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "destroying stack udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

            echo "destroying stack udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

            echo "destroying bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7}"

            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters: 
      workflow_id:
          type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl to get last migration status from kvdb.io
            SUCCESS=$(curl --insecure  https://kvdb.io/39aAvi3nFTRWeu2VMdWWQC/migration_${workflow_id})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PD3KA5PD
          event: pass
          template: basic_success_1

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build

      - slack/notify:
          channel: C03PD3KA5PD
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PD3KA5PD
          event: pass
          template: basic_success_1

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --query "Reservations[*].Instances[*].PublicIpAddress"  \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> .circleci/ansible/inventory.txt

            cat .circleci/ansible/inventory.txt

            curl https://kvdb.io/RSXGKMfzHxp3zMMi63Aczo/IP \
                -d $(aws ec2 describe-instances \
                --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --output text)

      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment: 
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["50:23:0c:56:90:20:87:6a:ed:4e:1b:49:f5:41:86:b5"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            apk add --update ansible

      - run:
          name: Configure server
          working_directory: .circleci/ansible
          command: |
            cat inventory.txt
            echo PWD $(pwd)
            ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure
      # - destroy-environment: 
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install

            # Run and save the migration output
            npm run migrations > migrations_dump.txt

            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl --insecure https://kvdb.io/39aAvi3nFTRWeu2VMdWWQC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              else
                  curl --insecure https://kvdb.io/39aAvi3nFTRWeu2VMdWWQC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0' 
              fi

      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
            
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl https://kvdb.io/RSXGKMfzHxp3zMMi63Aczo/IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            cd frontend
            npm install
            npm run build
            ls -alh
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive

      # Here's where you will add some code to rollback on failure   
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.11.0b4-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["50:23:0c:56:90:20:87:6a:ed:4e:1b:49:f5:41:86:b5"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update openssh-server
            apk add --update curl
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files 
            cp -p artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" \
             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            echo "${OldWorkflowID}" >> OldWorkflowID.txt

            cat OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Remove old stacks and files
          command: |
            cat OldWorkflowID.txt

            OldWorkflowID=$(cat OldWorkflowID.txt)

             echo OldWorkflowID: "${OldWorkflowID}"

            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"

            echo "s3://udapeople-${OldWorkflowID}"

            if [[ ${CIRCLE_WORKFLOW_ID:0:7} != ${OldWorkflowID} ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "------------------------------Nothing to Clean-------------------------------"
            fi

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name=='WorkflowID'].Value" \
            --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"

            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"

            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)

            echo Stack names: "${STACKS[@]}"

      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name=='WorkflowID'].Value" \
            --no-paginate --output text)
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "CurrentStack: ${CIRCLE_WORKFLOW_ID:0:7}"

            if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
            then

              echo "Deleting s3://udapeople-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive

              echo "Deleting udapeople-backend-${OldWorkflowID} stack"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"

              echo "Deleting udapeople-frontend-${OldWorkflowID} stack"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"

            else
              echo "Cannot Cleanup"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      - cloudfront-update
          # requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]